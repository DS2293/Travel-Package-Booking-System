import { createContext, useContext, useState, useEffect } from 'react';
import { api } from '../api';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    // Check if user is logged in from localStorage
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
      const user = JSON.parse(savedUser);
      setCurrentUser(user);
      setIsAuthenticated(true);
    }
  }, []);

  const login = async (email, password) => {
    try {
      const result = await api.user.login({ email, password });
      
      if (result.success && result.data) {
        setCurrentUser(result.data);
        setIsAuthenticated(true);
        localStorage.setItem('currentUser', JSON.stringify(result.data));
        localStorage.setItem('authToken', result.data.token); // Store JWT token if provided
        return { success: true, user: result.data };
      } else {
        return { success: false, message: result.error || 'Invalid email or password' };
      }
    } catch (error) {
      console.error('Login failed:', error);
      return { success: false, message: 'Login failed. Please try again.' };
    }
  };

  const register = async (userData) => {
    try {
      // Try API registration first
      const result = await api.user.createUser({
        ...userData,
        registrationDate: new Date().toISOString(),
        approval: userData.role === 'agent' ? 'pending' : 'approved'
      });
      
      if (result.success && result.data) {
        // Auto-login after successful registration for customers
        if (userData.role === 'customer') {
          setCurrentUser(result.data);
          setIsAuthenticated(true);
          localStorage.setItem('currentUser', JSON.stringify(result.data));
        }
        return { success: true, user: result.data };
      }
    } catch (error) {
      console.error('API registration failed:', error);
      return { success: false, message: 'Registration failed. Please try again.' };
    }

    return { success: false, message: 'Registration failed. Please try again.' };
  };

  const logout = async () => {
    try {
      // Call API logout endpoint if available
      // await api.user.logout();
    } catch (error) {
      console.error('Logout API call failed:', error);
    }

    setCurrentUser(null);
    setIsAuthenticated(false);
    localStorage.removeItem('currentUser');
    localStorage.removeItem('authToken');
  };

  const updateUser = async (updatedUser) => {
    try {
      const result = await api.user.updateUser(updatedUser.UserID, updatedUser);
      
      if (result.success) {
        setCurrentUser(updatedUser);
        localStorage.setItem('currentUser', JSON.stringify(updatedUser));
        return { success: true };
      } else {
        return { success: false, message: result.error || 'Failed to update user' };
      }
    } catch (error) {
      console.error('Failed to update user:', error);
      return { success: false, message: 'Failed to update user. Please try again.' };
    }
  };

  const value = {
    currentUser,
    isAuthenticated,
    login,
    register,
    logout,
    updateUser
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}; 